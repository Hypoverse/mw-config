<?php
# This file was automatically generated by the MediaWiki 1.35.0
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
    exit;
}

## $wgShowExceptionDetails = true;
## $wgDebugToolbar = true;
## $wgShowDebug = true;
## $wgDevelopmentWarnings = true;
## error_reporting( -1 );
## ini_set( 'display_errors', 1 );
## $wgDebugLogFile = "/var/log/mw/debug-{$wgDBname}.log";

$wgThumbnailEpoch = 20230304144751;
$wgCacheEpoch = 20230304144751;
setlocale(LC_NUMERIC, "C");
$wgShellLocale = "C.UTF-8";

$wgCookieDomain = '.hypoverse.org';
$wgCookiePrefix = 'hypoverse';
$wgCrossSiteAJAXdomains = array( '*.hypoverse.org' );
## $wgReadOnly = ( PHP_SAPI === 'cli' ) ? false : 'This wiki is currently being upgraded to a newer software version. Please check back later.';

$wgScriptPath = "/w";
$wgArticlePath = "/wiki/$1";
$wgResourceBasePath = $wgScriptPath;

$wgLanguageCode = "en";

## UPO means: this is also a user preference option
$wgEnableEmail = true;
$wgEnableUserEmail = false;

$wgEmergencyContact = "wiki@hypoverse.org";
$wgPasswordSender = "wiki@hypoverse.org";

# Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = true;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = true;

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
$wgCacheDirectory = "$IP/cache";


# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "2"; // testing

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

#################################
## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";
unset( $wgFooterIcons['poweredby'] );
$wgFooterIcons['poweredby']['semanticmediawiki'] = false;
#################################

$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO

$wgSMTP = [
    'host' => 'ssl://smtppro.zoho.com',  // hostname of the email server
    'IDHost' => 'zoho.com',
    'port' => 465,
    'username' => 'wiki@hypoverse.org', // user of the email account
    'password' => 'b6RP2qAEzggd',  // app password of the email account
    'auth' => true
];

$wgEmailAuthentication = true;
$wgDefaultUserOptions['prefershttps'] = 1;
$wgDefaultUserOptions['thumbsize'] = '0';
$wgHiddenPrefs[] = 'disablemail';
$wgHiddenPrefs[] = 'enotifrevealaddr';
$wgHiddenPrefs[] = 'gender';
$wgHiddenPrefs[] = 'realname';
$wgHiddenPrefs[] = 'nickname';

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgSessionCacheType  = CACHE_DB;
$wgMemCachedServers = [];
$wgCookieSecure = true;
$wgForceHTTPS = true;
$wgSecureLogin = true;

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
$wgUseImageMagick = true;
$wgCustomConvertCommand = "gm convert %s -resize %wx%h %d";
$wgMaxUploadSize = 104857600; # 100 MB
$wgMaxImageArea = 1e10;       # 100000x100000 (10,000,000,000 pixels)
# $wgThumbnailScriptPath = "{$wgScriptPath}/thumb.php";
# $wgSharedThumbnailScriptPath = "{$wgScriptPath}/thumb.php";
$wgMaxShellFileSize = 204400;
$wgMaxShellWallClockTime = 720;
$wgMaxShellTime = 720;
$wgMaxShellMemory = 408800;
$wgSVGConverterPath = '/usr/local/bin';

$wgGenerateThumbnailOnParse = true;
$wgEnableScaryTranscluding = true;
# $wgIncludeLegacyJavaScript = true;

$wgUseSiteJs = true;
$wgUseSiteCss = true;
$wgAllowUserJs = true;
$wgAllowUserCss = true;

//Global Settings
$wgEnablePartialActionBlocks = true;
$wgFragmentMode = ['html5', 'legacy'];
$wgLocaltimezone = "UTC";
date_default_timezone_set( $wgLocaltimezone );
$wgUseFilePatrol = false; # Can be re-enabled on a per-wiki basis if needed
$wgUseRCPatrol = false;   # Can be re-enabled on a per-wiki basis if needed
$wgUseNPPatrol = true;
$wgImplicitGroups = array('*', 'user', 'autoconfirmed', 'extendedconfirmed');
$wgCookieSetOnAutoblock = true;
$wgAllowCopyUploads = true;
$wgCopyUploadsFromSpecialUpload = true;
$wgCookieSetOnIpBlock = true;
$wgUseAjax = true;
$wgEnableAPI = true;
$wgEnableWriteAPI = true;
$wgAllowUserCssPrefs = true;
$wgAccountCreationThrottle = 2;
$wgAutoConfirmCount = 10;
$wgAutoConfirmAge = 86400*4;
$wgAutopromote['emailconfirmed'] = APCOND_EMAILCONFIRMED;
$wgAutopromote['extendedconfirmed'] = array(
    '&',
    APCOND_EMAILCONFIRMED,
    array( APCOND_EDITCOUNT, 100 ), # 100 edits
    array( APCOND_AGE, 86400*14 ),  # 14 days
);

$wgBlockCIDRLimit = array (
       'IPv4' => 16,
       'IPv6' => 18
);

$wgArticleRobotPolicies = [
    'Main Page' => 'noindex'
];

$wgNamespaceAliases['T'] = NS_TEMPLATE;
$wgNamespaceProtection[NS_TALK] = array( 'edittalk' );
$wgNamespaceProtection[NS_TEMPLATE] = array( 'edittemplates' );
$wgNamespaceProtection[NS_USER_TALK] = array( 'editusertalk' );
$wgSemiprotectedRestrictionLevels = [ 'autoconfirmed', 'extendedconfirmed' ];
$wgRestrictionLevels = [ '', 'autoconfirmed', 'extendedconfirmed', 'moderator', 'sysop', 'bureaucrat', 'consul', 'tech', 'staff', 'manager' ];
$wgRestrictionTypes = [ 'create', 'delete', 'edit', 'move', 'upload' ];
$wgFileExtensions = array( 'png', 'gif', 'jpg', 'jpeg', 'ico', 'svg', 'pdf' );

$wgUseFilePatrol = false; # Can be re-enabled later on a per-wiki basis.
$wgUseRCPatrol = false;   # Can be re-enabled later on a per-wiki basis.

$wgRightsIcon = "$wgScriptPath/resources/assets/licenses/cc-by-nc-sa.png";
$wgRightsUrl = 'https://creativecommons.org/licenses/by-nc-sa/4.0/';

# $wgWhitelistRead
$wgWhitelistRead = ["Main Page", "Special:UserLogin", "Special:UserLogout"];

$actions = ['edit', 'watch', 'unwatch', 'delete','revert', 'rollback', 'protect', 'unprotect', 'markpatrolled', 'render', 'submit', 'history', 'purge', 'info', 'login', 'logout' ];
 
foreach ( $actions as $action ) {
  $wgActionPaths[$action] = "/wiki/$1&action=$action";
}

$wgActionPaths['view'] = "/wiki/$1";
$wgArticlePath = $wgActionPaths['view'];

# Unsetting some user groups
$wgExtensionFunctions[] = function() {
    global $wgGroupPermissions;
    
    unset(
        $wgGroupPermissions['checkuser'],
        $wgGroupPermissions['commentadmin'],
        $wgGroupPermissions['extconfirmed'],
        $wgGroupPermissions['flow-bot'],
        $wgGroupPermissions['forumadmin'],
        $wgGroupPermissions['interface-admin'],
        $wgGroupPermissions['push-subscription-manager'],
        $wgGroupPermissions['smwadministrator'],
        $wgGroupPermissions['smwcurator'],
        $wgGroupPermissions['smweditor'],
        $wgGroupPermissions['steward'],
        $wgGroupPermissions['suppress']
    );

};

## wikifarm configuration
$server = $_SERVER['SERVER_NAME'] ?? $wgServer;
$wgDBname = '';

if ( defined( "MW_DB" ) ) {
    // Command-line mode and maintenance scripts (e.g. update.php)
    $wgDBname = MW_DB;
    include( "LocalSettings_" . str_replace( '_wiki', '', $wgDBname ) . ".php" );
}
else {
    if ( preg_match( "/^(.*)\.hypoverse.org$/", $server, $matches ) ) {
        if ($matches[1] == "www" || $matches[1] == "controlpanel" || $matches[1] == "mail" || $matches[1] == "shellbox") {
            $wikiname = "meta";
            $wgDBname = "meta_wiki";
    }
        else {
        $wikiname = $matches[1];
    }
    }
    else {
        $wikiname = "meta";
    }
    $subdomain_parts = explode( '-', $wikiname );
    if ( count( $subdomain_parts ) > 1 ) { 
        $wgDBname = lcfirst( implode( '', array_map( 'ucwords', $subdomain_parts ) ) ) . "_wiki";
    }
    else {
        $wgDBname = $wikiname . "_wiki";
    }
    include( "LocalSettings_" . $wikiname . ".php" );
    if ( $wikiname === "meta" ) {
        $wgDBname = "meta_wiki";
    }
}    

if ($wgDBname !== "controlpanel_wiki") {
    $wgSharedDB = "meta_wiki";
    $wgSharedTables = [
    'user',
	'user_properties',
	'actor',
    'interwiki',
    ];
}

$wgFooterIcons['poweredby'] = [
    "IWF" => [
        "src" => "https://meta.hypoverse.org/w/images/general/Meta/6/6c/IWF_Member.png",
        "url" => "//indiewikifederation.org/",
        "alt" => "Member of the IWF",
        "height" => "38",
        "width" => "94",
    ]
];

$wgHooks['SkinAddFooterLinks'][] = function ( Skin $skin, string $key, array &$footerlinks ) {
    if ( $key === 'places' ) {
        $footerlinks['termsofuse'] = $skin->footerLink( 'termsofuse', 'termsofusepage' );
    };
};

// Add rel="nofollow" to links to pages that don't exist (redlinks)
$wgHooks['HtmlPageLinkRendererEnd'][] = 'noFollowRedLinks';
function noFollowRedLinks(
    $linkRenderer, $target, $isKnown, &$text, &$attribs, &$ret)
{
    if (!$isKnown && preg_match('/\bnew\b/S', $attribs['class'] ?? "")) {
        $attribs['rel'] = 'nofollow';
    }
    return true;
}

require_once "/srv/mediawiki/config/db_credentials.php";
// require_once "Local_CommonSettings.php";
require_once "Local_Extensions.php";
require_once "Local_Permissions.php";
require_once "Local_Skins.php";
// require_once "ManageWiki.php";